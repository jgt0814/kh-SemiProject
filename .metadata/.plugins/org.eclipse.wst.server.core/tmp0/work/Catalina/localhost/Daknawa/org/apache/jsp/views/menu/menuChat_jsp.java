/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.87
 * Generated at: 2023-05-14 15:39:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.menu;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.kh.member.model.vo.Member;

public final class menuChat_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.kh.member.model.vo.Member");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write('\r');
      out.write('\n');

	String contextPath = request.getContextPath(); // "/jsp"

Member loginName = (Member) request.getSession().getAttribute("loginUser");
String userId = loginName != null ? loginName.getUserName() : "익명";

String alertMsg = (String) session.getAttribute("alertMsg"); // alert 메세지

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>닭나와 채팅방</title>\r\n");
      out.write("<link rel=\"shortcut icon\" type=\"resources/admin/image/x-icon\" href=\"resources/css/public/playground_assets/logo.png\">\r\n");
      out.write("<style>\r\n");
      out.write("\r\n");
      out.write("* {\r\n");
      out.write("	box-sizing: border-box;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("body {\r\n");
      out.write("	margin: 0;\r\n");
      out.write("	font-family: Arial, sans-serif;\r\n");
      out.write("	background-color: #f2f2f2;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".container {\r\n");
      out.write("	display: flex;\r\n");
      out.write("	flex-direction: column;\r\n");
      out.write("	align-items: center;\r\n");
      out.write("	justify-content: center;\r\n");
      out.write("	height: 100vh;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".chat-box {\r\n");
      out.write("	display: flex;\r\n");
      out.write("	flex-direction: column;\r\n");
      out.write("	align-items: flex-start;\r\n");
      out.write("	justify-content: flex-end;\r\n");
      out.write("	width: 400px;\r\n");
      out.write("	height: 400px;\r\n");
      out.write("	border: 1px solid #d1d1d1;\r\n");
      out.write("	border-radius: 5px;\r\n");
      out.write("	padding: 20px;\r\n");
      out.write("	background-color: #fff;\r\n");
      out.write("	overflow-y: auto;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".message {\r\n");
      out.write("	max-width: 300px;\r\n");
      out.write("	margin-bottom: 10px;\r\n");
      out.write("	padding: 10px;\r\n");
      out.write("	border-radius: 5px;\r\n");
      out.write("	background-color: #d1d1d1;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".message.sent {\r\n");
      out.write("	align-self: flex-end;\r\n");
      out.write("	background-color: #2979ff;\r\n");
      out.write("	color: #fff;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".chat-controls {\r\n");
      out.write("	display: flex;\r\n");
      out.write("	flex-direction: row;\r\n");
      out.write("	align-items: center;\r\n");
      out.write("	justify-content: center;\r\n");
      out.write("	width: 400px;\r\n");
      out.write("	margin-top: 20px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".chat-input {\r\n");
      out.write("	flex-grow: 1;\r\n");
      out.write("	min-height: 40px;\r\n");
      out.write("	padding: 10px;\r\n");
      out.write("	border: 1px solid #d1d1d1;\r\n");
      out.write("	border-radius: 5px;\r\n");
      out.write("	font-size: 16px;\r\n");
      out.write("	resize: none;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".chat-send {\r\n");
      out.write("	margin-left: 10px;\r\n");
      out.write("	padding: 10px;\r\n");
      out.write("	border: none;\r\n");
      out.write("	border-radius: 5px;\r\n");
      out.write("	background-color: #2979ff;\r\n");
      out.write("	color: #fff;\r\n");
      out.write("	font-size: 16px;\r\n");
      out.write("	cursor: pointer;\r\n");
      out.write("	transition: background-color 0.3s ease-in-out;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write(".chat-send:hover {\r\n");
      out.write("	background-color: #2166e0;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div class=\"container\">\r\n");
      out.write("		<h1>Chat Room</h1>\r\n");
      out.write("		<div class=\"chat-box\" id=\"chat-box\"></div>\r\n");
      out.write("		<div class=\"user-list\" id=\"user-list\"></div>\r\n");
      out.write("		<div class=\"chat-controls\">\r\n");
      out.write("			<textarea class=\"chat-input\" id=\"chat-input\"\r\n");
      out.write("				placeholder=\"Type your message here...\"></textarea>\r\n");
      out.write("			<button class=\"chat-send\" id=\"chat-send\">Send</button>\r\n");
      out.write("		</div>\r\n");
      out.write("		<div class=\"user-list\" id=\"user-list\"></div>\r\n");
      out.write("	</div>\r\n");
      out.write("\r\n");
      out.write("	<script>\r\n");
      out.write("		const chatBox = document.getElementById(\"chat-box\");\r\n");
      out.write("		const chatInput = document.getElementById(\"chat-input\");\r\n");
      out.write("		const chatSend = document.getElementById(\"chat-send\");\r\n");
      out.write("		const userListElement = document.getElementById(\"user-list\");\r\n");
      out.write("\r\n");
      out.write("		// WebSocket 객체 생성\r\n");
      out.write("		const socket = new WebSocket(\"ws://192.168.40.28:8889/Daknawa/chat\");\r\n");
      out.write("\r\n");
      out.write("		const userId = \"");
      out.print(userId);
      out.write("\";\r\n");
      out.write("\r\n");
      out.write("		socket.addEventListener(\"open\", function (event) {\r\n");
      out.write("			console.log(\"WebSocket connected!\");\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("		// 메시지 수신 시 처리\r\n");
      out.write("		socket.onmessage = function (event) {\r\n");
      out.write("\r\n");
      out.write("			const message = event.data;\r\n");
      out.write("			const messageElement = document.createElement(\"div\");\r\n");
      out.write("\r\n");
      out.write("			// 보낸 사용자 정보와 함께 메시지 출력\r\n");
      out.write("			messageElement.innerHTML = message;\r\n");
      out.write("\r\n");
      out.write("			chatBox.appendChild(messageElement);\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("			// 채팅방 참여자 목록 출력\r\n");
      out.write("			const userList = messageElement.querySelectorAll(\".user\");\r\n");
      out.write("			if (userList.length > 0) {\r\n");
      out.write("				userListElement.innerHTML = \"\";\r\n");
      out.write("				userList.forEach(function (user) {\r\n");
      out.write("					const userElement = document.createElement(\"div\");\r\n");
      out.write("					userElement.innerHTML = user.textContent;\r\n");
      out.write("					userListElement.appendChild(userElement);\r\n");
      out.write("				});\r\n");
      out.write("			}\r\n");
      out.write("		};\r\n");
      out.write("\r\n");
      out.write("		// 메시지 전송 처리\r\n");
      out.write("		chatSend.addEventListener(\"click\", function () {\r\n");
      out.write("			const message = chatInput.value;\r\n");
      out.write("			socket.send(userId + \" : \" + message); // 사용자 아이디를 포함하여 메시지 전송\r\n");
      out.write("			chatInput.value = \"\";\r\n");
      out.write("		});\r\n");
      out.write("\r\n");
      out.write("		chatInput.addEventListener(\"keydown\", function (event) {\r\n");
      out.write("			if (event.key === \"Enter\" && !event.shiftKey) {\r\n");
      out.write("				event.preventDefault(); // 엔터키 기본 동작 취소\r\n");
      out.write("				chatSend.click(); // Send 버튼 클릭 이벤트 발생시키기\r\n");
      out.write("			} else if (event.key === \"Enter\" && event.shiftKey) {\r\n");
      out.write("				// 쉬프트 + 엔터 키를 눌렀을 때 다음 줄로 이동\r\n");
      out.write("				const currentValue = this.value;\r\n");
      out.write("				this.value = currentValue + \"\\n\"; // 현재 값에 다음 줄 추가\r\n");
      out.write("\r\n");
      out.write("				// 쉬프트 + 엔터 키를 눌렀을 때 현재 참여 중인 사용자들을 띄워줌\r\n");
      out.write("				socket.send(\"get_users\"); // 서버에 get_users 메시지를 보내 사용자 리스트를 요청\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("			\r\n");
      out.write("			//사용자 리스트 처리\r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
