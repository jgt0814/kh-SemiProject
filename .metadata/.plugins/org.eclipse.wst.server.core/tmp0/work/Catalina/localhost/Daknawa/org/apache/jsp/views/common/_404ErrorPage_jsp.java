/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.87
 * Generated at: 2023-05-13 14:05:11 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.common;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class _404ErrorPage_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>닭나와</title>\r\n");
      out.write("<link rel=\"shortcut icon\" type=\"resources/admin/image/x-icon\" href=\"resources/css/public/playground_assets/logo.png\">\r\n");
      out.write("<style>\r\n");
      out.write("	@import 'https://fonts.googleapis.com/css?family=Inconsolata';\r\n");
      out.write("	\r\n");
      out.write("	html {\r\n");
      out.write("	  min-height: 100%;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	body {\r\n");
      out.write("	  box-sizing: border-box;\r\n");
      out.write("	  height: 100%;\r\n");
      out.write("	  background-color: #000000;\r\n");
      out.write("	  background-image: radial-gradient(#11581E, #041607), url(\"https://media.giphy.com/media/oEI9uBYSzLpBK/giphy.gif\");\r\n");
      out.write("	  background-repeat: no-repeat;\r\n");
      out.write("	  background-size: cover;\r\n");
      out.write("	  font-family: 'Inconsolata', Helvetica, sans-serif;\r\n");
      out.write("	  font-size: 1.5rem;\r\n");
      out.write("	  color: rgba(128, 255, 128, 0.8);\r\n");
      out.write("	  text-shadow:\r\n");
      out.write("	      0 0 1ex rgba(51, 255, 51, 1),\r\n");
      out.write("	      0 0 2px rgba(255, 255, 255, 0.8);\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.noise {\r\n");
      out.write("	  pointer-events: none;\r\n");
      out.write("	  position: absolute;\r\n");
      out.write("	  width: 100%;\r\n");
      out.write("	  height: 100%;\r\n");
      out.write("	  background-image: url(\"https://media.giphy.com/media/oEI9uBYSzLpBK/giphy.gif\");\r\n");
      out.write("	  background-repeat: no-repeat;\r\n");
      out.write("	  background-size: cover;\r\n");
      out.write("	  z-index: -1;\r\n");
      out.write("	  opacity: .02;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.overlay {\r\n");
      out.write("	  pointer-events: none;\r\n");
      out.write("	  position: absolute;\r\n");
      out.write("	  width: 100%;\r\n");
      out.write("	  height: 100%;\r\n");
      out.write("	  background:\r\n");
      out.write("	      repeating-linear-gradient(\r\n");
      out.write("	      180deg,\r\n");
      out.write("	      rgba(0, 0, 0, 0) 0,\r\n");
      out.write("	      rgba(0, 0, 0, 0.3) 50%,\r\n");
      out.write("	      rgba(0, 0, 0, 0) 100%);\r\n");
      out.write("	  background-size: auto 4px;\r\n");
      out.write("	  z-index: 1;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.overlay::before {\r\n");
      out.write("	  content: \"\";\r\n");
      out.write("	  pointer-events: none;\r\n");
      out.write("	  position: absolute;\r\n");
      out.write("	  display: block;\r\n");
      out.write("	  top: 0;\r\n");
      out.write("	  left: 0;\r\n");
      out.write("	  right: 0;\r\n");
      out.write("	  bottom: 0;\r\n");
      out.write("	  width: 100%;\r\n");
      out.write("	  height: 100%;\r\n");
      out.write("	  background-image: linear-gradient(\r\n");
      out.write("	      0deg,\r\n");
      out.write("	      transparent 0%,\r\n");
      out.write("	      rgba(32, 128, 32, 0.2) 2%,\r\n");
      out.write("	      rgba(32, 128, 32, 0.8) 3%,\r\n");
      out.write("	      rgba(32, 128, 32, 0.2) 3%,\r\n");
      out.write("	      transparent 100%);\r\n");
      out.write("	  background-repeat: no-repeat;\r\n");
      out.write("	  animation: scan 7.5s linear 0s infinite;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	@keyframes scan {\r\n");
      out.write("	  0%        { background-position: 0 -100vh; }\r\n");
      out.write("	  35%, 100% { background-position: 0 100vh; }\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.terminal {\r\n");
      out.write("	  box-sizing: inherit;\r\n");
      out.write("	  position: absolute;\r\n");
      out.write("	  height: 100%;\r\n");
      out.write("	  width: 1000px;\r\n");
      out.write("	  max-width: 100%;\r\n");
      out.write("	  padding: 4rem;\r\n");
      out.write("	  text-transform: uppercase;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.output {\r\n");
      out.write("	  color: rgba(128, 255, 128, 0.8);\r\n");
      out.write("	  text-shadow:\r\n");
      out.write("	      0 0 1px rgba(51, 255, 51, 0.4),\r\n");
      out.write("	      0 0 2px rgba(255, 255, 255, 0.8);\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.output::before {\r\n");
      out.write("	  content: \"> \";\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	/*\r\n");
      out.write("	.input {\r\n");
      out.write("	  color: rgba(192, 255, 192, 0.8);\r\n");
      out.write("	  text-shadow:\r\n");
      out.write("	      0 0 1px rgba(51, 255, 51, 0.4),\r\n");
      out.write("	      0 0 2px rgba(255, 255, 255, 0.8);\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.input::before {\r\n");
      out.write("	  content: \"$ \";\r\n");
      out.write("	}\r\n");
      out.write("	*/\r\n");
      out.write("	\r\n");
      out.write("	a {\r\n");
      out.write("	  color: #fff;\r\n");
      out.write("	  text-decoration: none;\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	a::before {\r\n");
      out.write("	  content: \"[\";\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	a::after {\r\n");
      out.write("	  content: \"]\";\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	.errorcode {\r\n");
      out.write("	  color: white;\r\n");
      out.write("	}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	<div class=\"noise\"></div>\r\n");
      out.write("	<div class=\"overlay\"></div>\r\n");
      out.write("	<div class=\"terminal\">\r\n");
      out.write("  	<h1>Error <span class=\"errorcode\">404</span></h1>\r\n");
      out.write("  <p class=\"output\">에러떴습니다. 어쩌라구요.</p>\r\n");
      out.write("  <p class=\"output\">미안하게 됐수다.</p>\r\n");
      out.write("  <p class=\"output\"><a onclick=\"history.back();\">이전페이지로 이동</a> | <a href=\"/Daknawa\">메인페이지로 이동</a> 아무거나 누르셈</p>\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
